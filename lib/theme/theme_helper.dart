import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.blue800,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray40001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.blue800,
      ),
      dividerTheme: DividerThemeData(
        thickness: 42,
        space: 42,
        color: appTheme.blueGray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 16.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.indigo900,
          fontSize: 36.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        headlineMedium: TextStyle(
          color: appTheme.indigo900,
          fontSize: 27.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.indigo900,
          fontSize: 24.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.indigo900,
          fontSize: 10.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: appTheme.pinkA200,
          fontSize: 8.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 23.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 16.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray40001,
          fontSize: 14.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X30215BC5),
    secondaryContainer: Color(0XFFFF2281),

    // On colors(text colors)
    onPrimary: Color(0XFF141519),
    onPrimaryContainer: Color(0XAB868686),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber100 => Color(0XFFFEEFBE);
  Color get amber500 => Color(0XFFFFC409);
  Color get amberA200 => Color(0XFFFDCE3D);

  // Black
  Color get black900 => Color(0XFF030303);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFC7DCFF);
  Color get blue10001 => Color(0XFFCFDDF7);
  Color get blue200 => Color(0XFF8FBDFF);
  Color get blue50 => Color(0XFFE9F0FF);
  Color get blue5001 => Color(0XFFE6EFFD);
  Color get blue5002 => Color(0XFFEEF4FE);
  Color get blue5003 => Color(0XFFE9F1FF);
  Color get blue5004 => Color(0XFFE0EDFF);
  Color get blue5005 => Color(0XFFE9EFFD);
  Color get blue700 => Color(0XFF196AEA);
  Color get blue800 => Color(0XFF0E55D4);
  Color get blue90019 => Color(0X19164DB1);

  // Blued
  Color get blue502d => Color(0X2DDDE9FF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD1D6DA);
  Color get blueGray200 => Color(0XFFABB3BD);
  Color get blueGray20001 => Color(0XFFBBC2CA);
  Color get blueGray700 => Color(0XFF50555C);
  Color get blueGray900 => Color(0XFF1C2E45);

  // BlueGrayE
  Color get blueGray100E5 => Color(0XE5D2D5DB);

  // Gray
  Color get gray100 => Color(0XFFEFF5FF);
  Color get gray10001 => Color(0XFFEFF4FE);
  Color get gray200 => Color(0XFFECECEC);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFC8C8C8);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFFAAAAAA);
  Color get gray5001 => Color(0XFFF7FAFF);
  Color get gray5002 => Color(0XFFFBFCFC);
  Color get gray5003 => Color(0XFFF9F9FA);
  Color get gray700 => Color(0XFF616161);

  // Grayf
  Color get gray2003f => Color(0X3FE9E9E9);

  // Green
  Color get green50 => Color(0XFFDAFFDA);
  Color get green500 => Color(0XFF45DD54);
  Color get green5001 => Color(0XFFDCFFDC);
  Color get green5066 => Color(0X66E1FFED);
  Color get green70011 => Color(0X1111A920);
  Color get greenA100 => Color(0XFFBEFFDF);
  Color get greenA10001 => Color(0XFFBEFFBE);
  Color get greenA10002 => Color(0XFFB6FFDB);
  Color get greenA400 => Color(0XFF00E676);
  Color get greenA700 => Color(0XFF009A49);
  Color get greenA70001 => Color(0XFF04D604);

  // Indigo
  Color get indigo30016 => Color(0X167095D9);
  Color get indigo50 => Color(0XFFE0E9FA);
  Color get indigo900 => Color(0XFF082B6B);

  // LightGreen
  Color get lightGreen10066 => Color(0X66D8FFD8);

  // Orange
  Color get orange50 => Color(0XFFFFF7E0);
  Color get orange5001 => Color(0XFFFFF5D8);
  Color get orange5002 => Color(0XFFFFF7E1);

  // Pink
  Color get pink50 => Color(0XFFFFDFEF);
  Color get pink5001 => Color(0XFFFFE1F0);
  Color get pink600 => Color(0XFFD6247D);
  Color get pinkA200 => Color(0XFFFF2280);

  // Pinkc
  Color get pink504c => Color(0X4CFFD8EB);

  // Purple
  Color get purple400 => Color(0XFFAF30C3);
  Color get purple50 => Color(0XFFFAE2FF);
  Color get purple5001 => Color(0XFFFBE3FF);
  Color get purple5002 => Color(0XFFFCEAFF);

  // Purplef
  Color get purple504f => Color(0X4FFBE2FF);

  // Red
  Color get red100 => Color(0XFFFFC7DF);
  Color get red10001 => Color(0XFFFFC7DE);
  Color get red10002 => Color(0XFFFFCBE5);
  Color get red500 => Color(0XFFFF4238);
  Color get redA700 => Color(0XFFF01010);

  // Teal
  Color get teal50 => Color(0XFFD1FFE8);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow50 => Color(0XFFFFFAED);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
